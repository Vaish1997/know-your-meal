{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","servings","image","healthLabels","dietLabels","cautions","nutrients","ingredients","nutritionInfo","Array","Object","keys","forEach","key","push","nutritionLabel","label","quantity","Number","toFixed","unit","className","style","recipe","map","healthLabel","length","dietLabel","caution","src","alt","trigger","ingredient","text","nutrient","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","yield","totalNutrients","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.3bdd6aaf.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\nimport Collapsible from 'react-collapsible';\r\n\r\n\r\nconst Recipe = ({title, calories,servings,image,healthLabels,dietLabels,cautions,nutrients,ingredients}) => \r\n{     \r\n    let nutritionInfo = new Array();\r\n    Object.keys(nutrients).forEach(key => {  \r\n           \r\n        nutritionInfo.push({    \r\n        nutritionLabel: nutrients[key].label,\r\n        quantity: Number(nutrients[key].quantity).toFixed(2),\r\n        unit: nutrients[key].unit\r\n        \r\n        })\r\n        \r\n      });\r\n      \r\n    return(\r\n        <div>\r\n            <h1 className = {style.recipe}>\r\n                { title }\r\n            </h1>\r\n    <p><strong>Servings: </strong>{ servings }</p>\r\n            <p> <strong>Calories Per Serving:</strong> {calories.toFixed()}</p>\r\n            <p><strong>Health Labels</strong></p>\r\n            <ol>\r\n            {healthLabels.map(\r\n                healthLabel =>\r\n                 (\r\n                 <li>{healthLabel}</li>\r\n                 )\r\n            )\r\n\r\n            }\r\n            </ol>\r\n            <p><strong>Diet Labels</strong></p>\r\n            <ol>\r\n           \r\n            \r\n                {\r\n                    dietLabels.length > 0 ? \r\n                    \r\n            dietLabels.map(\r\n                dietLabel =>\r\n                 (\r\n                 <li>{dietLabel}</li>\r\n                 )\r\n            ) : <p><strong>Diet Labels not available</strong></p>\r\n                 }\r\n                \r\n                \r\n\r\n            \r\n            </ol>\r\n\r\n            <p><strong>Cautions</strong></p>\r\n            <ol>\r\n            {cautions.map(\r\n                caution =>\r\n                 (\r\n                 <li>{caution}</li>\r\n                 )\r\n            )\r\n\r\n            }\r\n            </ol>\r\n        \r\n            <img src= {image} alt= \"\"></img>\r\n        <Collapsible trigger = \"View Ingredients +\">\r\n        <h3>Ingredients</h3>\r\n        <ul>\r\n            {\r\n                ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n        </ul>\r\n        </Collapsible>\r\n        <Collapsible trigger = 'View Nutrition Info... +'>\r\n        <table className = 'darkTable'>\r\n            <thead>\r\n                <tr>\r\n                <th>\r\n                    Label\r\n                </th>\r\n                <th>\r\n                    Quantity\r\n                </th>\r\n                <th>\r\n                    Unit\r\n                </th>\r\n                </tr>\r\n                </thead>\r\n            <tbody>\r\n            {\r\n                nutritionInfo.map(nutrient => (\r\n                    <tr>\r\n                       <td>\r\n                        {nutrient.nutritionLabel}\r\n                        </td>\r\n                        <td>\r\n                        {nutrient.quantity} \r\n                        </td>\r\n                        <td>\r\n                        {nutrient.unit} \r\n                        </td>\r\n                        </tr>\r\n                ))}\r\n                </tbody>\r\n                </table>\r\n        </Collapsible>\r\n        \r\n        </div>\r\n        \r\n       \r\n    );\r\n}\r\n\r\nexport default Recipe;\r\n","import React,{useEffect,useState} from 'react';\nimport './App.css';\nimport Recipe from './Recipe';\n\nconst App = () =>\n{\n  const APP_ID = \"aac0226e\";\n  const APP_KEY = \"b670a8fed195839fde6568d7427b4085\t\";\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('Vegetarian');\n  useEffect (\n    () => {\n      getRecipes();\n    },[query]\n  );\n\n  const getRecipes = async () => {\n    const response  = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data);\n  }\nconst updateSearch = (e) => {\n  setSearch(e.target.value);\n  console.log(search);\n}\n\nconst getSearch = e =>{\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n  return(\n    <div className = \"App\">\n      <form className = \"search-form\" onSubmit = {getSearch}>\n        <input type = \"text\" className =\"search-bar\" value = {search} onChange = {updateSearch}></input>\n        <button className = \"search-button\" type = \"submit\"> Search </button>\n      </form>\n      \n     <div className = \"recipes\">\n     { recipes.map(recipe => (\n        <Recipe \n        key = { recipe.recipe.label} \n        title = {recipe.recipe.label} \n        calories = {recipe.recipe.calories}\n        servings = {recipe.recipe.yield}\n        image = {recipe.recipe.image} \n        ingredients = {recipe.recipe.ingredients}\n        nutrients = {recipe.recipe.totalNutrients}\n        dietLabels = {recipe.recipe.dietLabels}\n        healthLabels = {recipe.recipe.healthLabels}\n        cautions = {recipe.recipe.cautions}\n        />\n        ))}\n        </div>  \n      { /* <div className = \"nutritionTable\">\n        {recipes.map(recipe => (\n        <NutritionFacts\n        nutrients = {recipe.recipe.totalNutrients}\n        /> \n        ))}\n        </div> */}\n  </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2E9OQ\",\"darkTable\":\"recipe_darkTable__1spAl\"};"],"sourceRoot":""}